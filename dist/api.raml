#%RAML 1.0
---
title: eLife Sciences API
baseUri: https://api.elifesciences.org/
version: 1.0.0
documentation:
  - title: Welcome
    content: |
        Welcome to the eLife Sciences API. The API is described using [RAML 1.0](http://raml.org/); it is available in [its raw form](api.raml), or as this compiled documentation.
  - title: Licence
    content: |
        Copyright 2016 eLife Sciences. Licensed under the GPLv3.

        This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

        You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
  - title: Versioning
    content: |
        API endpoints are not versioned, but the body of requests/responses are.

        Content versioning
        ------------------

        Endpoints produce/consume dedicated content type, with the version as a parameter (eg `application/vnd.elife.labs-experiment-list+json;version=1`). These are primarily JSON-based (and described using [JSON Schema](http://json-schema.org/)), but alternative representations may be available.

        This verisoning follows [semantic versioning](http://semver.org/). Note we only use the major version as minor versions are backwards compatabile (so the API will return versions `1` and `2` rather than `1.0`, `1.1`, `2.0` etc).

        You can request a specific version of a response using content negotation (eg `Accept: application/vnd.elife.labs-experiment-list+json;version=1`). The most recent version will always be preferred, so without a `version` parameter on the `Accept` header the latest version will be returned.

        Endpoint versioning
        -------------------

        As the endpoint itself is not versioned, functionality may be removed (including removing support for versions of content). We will try and deprecate first, and avoid removing support where possible.

        When something has been marked as deprecated we will add a message to responses as a the HTTP `Warning` header (a deprecation will always begin with the word 'Deprecation'). For example, `Warning: 299 api.elifesciences.org "Deprecation: 'foo' query string parameter will be removed, use 'bar' instead"`.

resourceTypes:
    base:
        get?: &common
    item:
        type: base
        usage: This resource type should be used for any single item.
        get?:
            responses:
                404:
                    description: |
                        <<resource>> is not found.
                    body:
                        application/problem+json:
                            schema: !include model/error.json
                            example: |
                                {
                                    "title": "<<resource>> not found"
                                }
                410:
                    description: |
                        <<resource>> has been removed.
                    body:
                        application/problem+json:
                            schema: !include model/error.json
                            example: |
                                {
                                    "title": "<<resource>> removed"
                                }
    collection:
        type: base
        usage: This resourceType should be used for any collection of items.
        get?:

traits:
    paged:
        queryParameters:
            page:
                description: |
                    Page number to retrieve.
                type: integer
                required: false
                default: 1
                minimum: 1
                example: 2
            per-page:
                description: |
                    Number of <<resources | !lowercase>> per page.
                type: integer
                required: false
                default: 20
                minimum: 1
                maximum: 100
                example: 50
            order:
                description: |
                    Ordering direction.
                type: string
                required: false
                default: desc
                enum:
                  - asc
                  - desc
                example: asc
        responses:
            404:
                description: |
                    Page is not found.

                    Note the first page will always return a valid result, even if the list is empty.
                body:
                    application/problem+json:
                        schema: !include model/error.json
                        example: |
                            {
                                "title": "Page not found"
                            }
    subjected:
        queryParameters:
            subject:
                description: |
                    Only include <<resources | !lowercase>> with one of the specified subjects.
                type: string
                required: false
                repeat: true
                example: cell-biology

/labs-experiments:
    type: collection
    description: |
        Labs experiments
    get:
        description: |
            Get a list of experiments, sorted by number.
        is:
          - paged: { resources: Experiments }
        responses:
            200:
                description: |
                    List of experiments, sorted by number.
                body:
                    application/vnd.elife.labs-experiment-list+json;version=1:
                        schema: !include model/labs-experiment-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/labs-experiment-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/labs-experiment-list/v1/empty.json

    /{number}:
        type:
            item:
                resource: Experiment
        description: |
            Individual Labs experiment.
        uriParameters:
            number:
                description: |
                    Experiment number.
                type: integer
                minimum: 1
        get:
            description: |
                Get an experiment.
            responses:
                200:
                    description: |
                        Experiment.
                    body:
                        application/vnd.elife.labs-experiment+json;version=1:
                            schema: !include model/labs-experiment.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/labs-experiment/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/labs-experiment/v1/complete.json

/podcast-episodes:
    type: collection
    description: |
        Podcast episodes
    get:
        description: |
            Get a list of episodes, sorted by number.
        is:
          - paged: { resources: Episodes }
          - subjected: { resources: Episodes }
        responses:
            200:
                description: |
                    List of episodes, sorted by number.
                body:
                    application/vnd.elife.podcast-episode-list+json;version=1:
                        schema: !include model/podcast-episode-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/podcast-episode-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/podcast-episode-list/v1/empty.json

    /{number}:
        type:
            item:
                resource: Episode
        description: |
            Individual podcast episode.
        uriParameters:
            number:
                description: |
                    Episode number.
                type: integer
                minimum: 1
        get:
            description: |
                Get an episode.
            responses:
                200:
                    description: |
                        Episode.
                    body:
                        application/vnd.elife.podcast-episode+json;version=1:
                            schema: !include model/podcast-episode.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/podcast-episode/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/podcast-episode/v1/complete.json

/subjects:
    type: collection
    description: |
        Subjects
    get:
        description: |
            Get a list of subjects, sorted by name.
        is:
          - paged: { resources: Subjects }
        responses:
            200:
                description: |
                    List of subjects, sorted by number.
                body:
                    application/vnd.elife.subject-list+json;version=1:
                        schema: !include model/subject-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/subject-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/subject-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Subject
        description: |
            Individual subject.
        uriParameters:
            id:
                description: |
                    Subject ID.
                type: string
        get:
            description: |
                Get a subject.
            responses:
                200:
                    description: |
                        Subject.
                    body:
                        application/vnd.elife.subject+json;version=1:
                            schema: !include model/subject.v1.json
                            example:
                                value: !include samples/subject/v1/complete.json
