#%RAML 1.0
---
title: eLife Sciences API
baseUri: https://api.elifesciences.org/
version: 1.0.0
documentation:
  - title: Welcome
    content: |
        Welcome to the eLife Sciences API. The API is described using [RAML 1.0](http://raml.org/); it is available in [its raw form](api.raml), or as this compiled documentation.
  - title: Licence
    content: |
        Copyright 2016 eLife Sciences. Licensed under the GPLv3.

        This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

        You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.
  - title: Versioning
    content: |
        API endpoints are not versioned, but the body of requests/responses are.

        Content versioning
        ------------------

        Endpoints produce/consume dedicated content type, with the version as a parameter (eg `application/vnd.elife.labs-experiment-list+json;version=1`). These are primarily JSON-based (and described using [JSON Schema](http://json-schema.org/)), but alternative representations may be available.

        This verisoning follows [semantic versioning](http://semver.org/). Note we only use the major version as minor versions are backwards compatabile (so the API will return versions `1` and `2` rather than `1.0`, `1.1`, `2.0` etc).

        You can request a specific version of a response using content negotation (eg `Accept: application/vnd.elife.labs-experiment-list+json;version=1`). The most recent version will always be preferred, so without a `version` parameter on the `Accept` header the latest version will be returned.

        Endpoint versioning
        -------------------

        As the endpoint itself is not versioned, functionality may be removed (including removing support for versions of content). We will try and deprecate first, and avoid removing support where possible.

        When something has been marked as deprecated we will add a message to responses as a the HTTP `Warning` header (a deprecation will always begin with the word 'Deprecation'). For example, `Warning: 299 api.elifesciences.org "Deprecation: 'foo' query string parameter will be removed, use 'bar' instead"`.

resourceTypes:
    base:
        get?: &common
    item:
        type: base
        usage: This resource type should be used for any single item.
        get?:
            responses:
                404:
                    description: |
                        <<resource>> is not found.
                    body:
                        application/problem+json:
                            schema: !include ../dist/model/error.v1.json
                            example: |
                                {
                                    "title": "<<resource>> not found"
                                }
                410:
                    description: |
                        <<resource>> has been removed.
                    body:
                        application/problem+json:
                            schema: !include ../dist/model/error.v1.json
                            example: |
                                {
                                    "title": "<<resource>> removed"
                                }
    collection:
        type: base
        usage: This resourceType should be used for any collection of items.
        get?:

traits:
    paged:
        queryParameters:
            page:
                description: |
                    Page number to retrieve.
                type: integer
                required: false
                default: 1
                minimum: 1
                example: 2
            per-page:
                description: |
                    Number of <<resources | !lowercase>> per page.
                type: integer
                required: false
                default: 20
                minimum: 1
                maximum: 100
                example: 50
            order:
                description: |
                    Ordering direction.
                type: string
                required: false
                default: desc
                enum:
                  - asc
                  - desc
                example: asc
        responses:
            404:
                description: |
                    Page is not found.

                    Note the first page will always return a valid result, even if the list is empty.
                body:
                    application/problem+json:
                        schema: !include ../dist/model/error.v1.json
                        example: |
                            {
                                "title": "Page not found"
                            }
    subjected:
        queryParameters:
            subject:
                description: |
                    Only include <<resources | !lowercase>> with one of the specified subjects.
                type: string
                required: false
                repeat: true
                example: cell-biology

/annual-reports:
    type: collection
    description: |
        Annual reports
    get:
        description: |
            Get a list of annual reports, sorted by year.
        is:
          - paged: { resources: Annual reports }
        responses:
            200:
                description: |
                    List of annual reports, sorted by year.
                body:
                    application/vnd.elife.annual-report-list+json;version=1:
                        schema: !include ../dist/model/annual-report-list.v1.json
                        examples:
                            populated:
                                displayName: Populated list
                                description: |
                                    List is split over two pages.
                                value: !include samples/annual-report-list/v1/populated.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/annual-report-list/v1/empty.json

    /{year}:
        type:
            item:
                resource: Annual report
        description: |
            Individual annual report.
        uriParameters:
            year:
                description: |
                    Annual report year.
                type: integer
                minimum: 2012
        get:
            description: |
                Get an annual report.
            responses:
                200:
                    description: |
                        Annual report.
                    body:
                        application/vnd.elife.annual-report+json;version=1:
                            schema: !include ../dist/model/annual-report.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/annual-report/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/annual-report/v1/complete.json

/articles:
    type: collection
    description: |
        Article
    get:
        description: |
            Get a list of articles, sorted by date.
        is:
          - paged: { resources: Articles }
        responses:
            200:
                description: |
                    List of articles, sorted by date.
                body:
                    application/vnd.elife.articles-list+json;version=1:
                        schema: !include model/article-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/article-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/article-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Article
        description: |
            Latest version of an individual article.
        uriParameters:
            id:
                description: |
                    Article ID.
                type: string
        get:
            description: |
                Get an article.
            responses:
                200:
                    description: |
                        Article latest version.
                    body:
                        application/vnd.elife.article-poa+json;version=1:
                            schema: !include ../dist/model/article-poa.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/article-poa/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/article-poa/v1/complete.json
                        application/vnd.elife.article-vor+json;version=1:
                            schema: !include model/article-vor.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/article-vor/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/article-vor/v1/complete.json

        /versions:
            type:
                item:
                    resource: Article
            description: |
                Individual article history.
            get:
                description: |
                    Get an article history.
                responses:
                    200:
                        description: |
                            Article history.
                        body:
                            application/vnd.elife.article-history+json;version=1:
                                schema: !include ../dist/model/article-history.v1.json
                                examples:
                                    minimum:
                                        displayName: Minimum
                                        value: !include samples/article-history/v1/minimum.json
                                    oneVersion:
                                        displayName: One version
                                        value: !include samples/article-history/v1/one-version.json
                                    multipleVersions:
                                        displayName: Multiple versions
                                        value: !include samples/article-history/v1/multiple-versions.json

            /{version}:
                type:
                    item:
                        resource: Article version
                description: |
                    Individual article version.
                uriParameters:
                    version:
                        description: |
                            Article version number.
                        type: integer
                        minimum: 1
                get:
                    description: |
                        Get an article.
                    responses:
                        200:
                            description: |
                                Article version.
                            body:
                                application/vnd.elife.article-poa+json;version=1:
                                    schema: !include ../dist/model/article-poa.v1.json
                                    examples:
                                        minimum:
                                            displayName: Minimum
                                            value: !include samples/article-poa/v1/minimum.json
                                        complete:
                                            displayName: Complete
                                            value: !include samples/article-poa/v1/complete.json
                                application/vnd.elife.article-vor+json;version=1:
                                    schema: !include ../dist/model/article-vor.v1.json
                                    examples:
                                        minimum:
                                            displayName: Minimum
                                            value: !include samples/article-vor/v1/minimum.json
                                        complete:
                                            displayName: Complete
                                            value: !include samples/article-vor/v1/complete.json

/blog-articles:
    type: collection
    description: |
        Blog articles
    get:
        description: |
            Get a list of articles, sorted by publication date.
        is:
          - paged: { resources: Articles }
          - subjected: { resources: Articles }
        responses:
            200:
                description: |
                    List of articles, sorted by publication date.
                body:
                    application/vnd.elife.blog-article-list+json;version=1:
                        schema: !include ../dist/model/blog-article-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/blog-article-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/blog-article-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Article
        description: |
            Individual blog article.
        uriParameters:
            id:
                description: |
                    Article ID.
                type: string
        get:
            description: |
                Get an article.
            responses:
                200:
                    description: |
                        Article.
                    body:
                        application/vnd.elife.blog-article+json;version=1:
                            schema: !include ../dist/model/blog-article.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/blog-article/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/blog-article/v1/complete.json

/collections:
    type: collection
    description: |
        Collections
    get:
        description: |
            Get a list of collections, sorted by date.
        is:
          - paged: { resources: Collections }
          - subjected: { resources: Collections }
        responses:
            200:
                description: |
                    List of collections, sorted by date.
                body:
                    application/vnd.elife.collection-list+json;version=1:
                        schema: !include ../dist/model/collection-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/collection-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/collection-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Collection
        description: |
            Individual collection.
        uriParameters:
            id:
                description: |
                    Collection ID.
                type: string
        get:
            description: |
                Get a collection.
            responses:
                200:
                    description: |
                        Collection.
                    body:
                        application/vnd.elife.collection+json;version=1:
                            schema: !include ../dist/model/collection.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/collection/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/collection/v1/complete.json

/events:
    type: collection
    description: |
        Events
    get:
        description: |
            Get a list of events, sorted by start date.
        is:
          - paged: { resources: Events }
        queryParameters:
            show:
                description: |
                    Type of events to show.
                type: string
                required: false
                default: all
                enum:
                  - all
                  - closed
                  - open
        responses:
            200:
                description: |
                    List of events, sorted by start date.
                body:
                    application/vnd.elife.event-list+json;version=1:
                        schema: !include ../dist/model/event-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/event-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/event-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Event
        description: |
            Individual event.
        uriParameters:
            id:
                description: |
                    Event ID.
                type: string
        get:
            description: |
                Get an event.
            responses:
                200:
                    description: |
                        Event.
                    body:
                        application/vnd.elife.event+json;version=1:
                            schema: !include ../dist/model/event.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/event/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/event/v1/complete.json

/interviews:
    type: collection
    description: |
        Interviews
    get:
        description: |
            Get a list of interviews, sorted by publication date.
        is:
          - paged: { resources: Interviews }
        responses:
            200:
                description: |
                    List of interviews, sorted by publication date.
                body:
                    application/vnd.elife.interview-list+json;version=1:
                        schema: !include ../dist/model/interview-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/interview-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/interview-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Interview
        description: |
            Individual interview.
        uriParameters:
            id:
                description: |
                    Interview ID.
                type: string
        get:
            description: |
                Get an interview.
            responses:
                200:
                    description: |
                        Interview.
                    body:
                        application/vnd.elife.interview+json;version=1:
                            schema: !include ../dist/model/interview.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/interview/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/interview/v1/complete.json

/labs-experiments:
    type: collection
    description: |
        Labs experiments
    get:
        description: |
            Get a list of experiments, sorted by number.
        is:
          - paged: { resources: Experiments }
        responses:
            200:
                description: |
                    List of experiments, sorted by number.
                body:
                    application/vnd.elife.labs-experiment-list+json;version=1:
                        schema: !include ../dist/model/labs-experiment-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/labs-experiment-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/labs-experiment-list/v1/empty.json

    /{number}:
        type:
            item:
                resource: Experiment
        description: |
            Individual Labs experiment.
        uriParameters:
            number:
                description: |
                    Experiment number.
                type: integer
                minimum: 1
        get:
            description: |
                Get an experiment.
            responses:
                200:
                    description: |
                        Experiment.
                    body:
                        application/vnd.elife.labs-experiment+json;version=1:
                            schema: !include ../dist/model/labs-experiment.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/labs-experiment/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/labs-experiment/v1/complete.json

/medium-articles:
    type: collection
    description: |
        Medium articles
    get:
        description: |
            Get a list of Medium articles, sorted by publication date.
        is:
          - paged: { resources: Articles }
        responses:
            200:
                description: |
                    List of Medium articles, sorted by publication date.
                body:
                    application/vnd.elife.medium-article-list+json;version=1:
                        schema: !include ../dist/model/medium-article-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/medium-article-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/medium-article-list/v1/empty.json

/people:
    type: collection
    description: |
        eLife people
    get:
        description: |
            Get a list of people, sorted by surname then given name.
        is:
          - paged: { resources: People }
          - subjected: { resources: People }
        queryParameters:
            type:
                description: |
                    Person type.
                type: string
                required: false
                enum:
                  - director
                  - executive
                  - leadership
                  - reviewing-editor
                  - senior-editor
        responses:
            200:
                description: |
                    List of people, sorted by surname then given name.
                body:
                    application/vnd.elife.person-list+json;version=1:
                        schema: !include ../dist/model/person-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/person-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/person-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Person
        description: |
            Individual person.
        uriParameters:
            id:
                description: |
                    Person ID.
                type: string
        get:
            description: |
                Get a person.
            responses:
                200:
                    description: |
                        Person.
                    body:
                        application/vnd.elife.person+json;version=1:
                            schema: !include ../dist/model/person.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/person/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/person/v1/complete.json

/podcast-episodes:
    type: collection
    description: |
        Podcast episodes
    get:
        description: |
            Get a list of episodes, sorted by number.
        is:
          - paged: { resources: Episodes }
          - subjected: { resources: Episodes }
        responses:
            200:
                description: |
                    List of episodes, sorted by number.
                body:
                    application/vnd.elife.podcast-episode-list+json;version=1:
                        schema: !include ../dist/model/podcast-episode-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/podcast-episode-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/podcast-episode-list/v1/empty.json

    /{number}:
        type:
            item:
                resource: Episode
        description: |
            Individual podcast episode.
        uriParameters:
            number:
                description: |
                    Episode number.
                type: integer
                minimum: 1
        get:
            description: |
                Get an episode.
            responses:
                200:
                    description: |
                        Episode.
                    body:
                        application/vnd.elife.podcast-episode+json;version=1:
                            schema: !include ../dist/model/podcast-episode.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/podcast-episode/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/podcast-episode/v1/complete.json

/search:
    type: collection
    description: |
        Search
    get:
        description: |
            Search.
        is:
          - paged: { resources: Results }
          - subjected: { resources: Results }
        queryParameters:
            for:
                description: |
                    Search term
                type: string
                required: true
                example: Plasmodium falciparum
            sort:
                description: |
                    Sorting method.
                type: string
                required: false
                default: relevance
                enum:
                  - relevance
                  - date
            type:
                description: |
                    Only include results of the specified types.
                type: string
                enum:
                  - correction
                  - editorial
                  - feature
                  - insight
                  - research-advance
                  - research-article
                  - research-exchange
                  - retraction
                  - registered-report
                  - replication-study
                  - short-report
                  - tools-resources
                  - blog-article
                  - event
                  - interview
                  - labs-experiment
                  - podcast-episode
                required: false
                repeat: true
        responses:
            200:
                description: |
                    List of results.
                body:
                    application/vnd.elife.search+json;version=1:
                        schema: !include ../dist/model/search.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/search/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/search/v1/empty.json

/subjects:
    type: collection
    description: |
        Subjects
    get:
        description: |
            Get a list of subjects, sorted by name.
        is:
          - paged: { resources: Subjects }
        responses:
            200:
                description: |
                    List of subjects, sorted by number.
                body:
                    application/vnd.elife.subject-list+json;version=1:
                        schema: !include ../dist/model/subject-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/subject-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/subject-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Subject
        description: |
            Individual subject.
        uriParameters:
            id:
                description: |
                    Subject ID.
                type: string
        get:
            description: |
                Get a subject.
            responses:
                200:
                    description: |
                        Subject.
                    body:
                        application/vnd.elife.subject+json;version=1:
                            schema: !include ../dist/model/subject.v1.json
                            example:
                                value: !include samples/subject/v1/complete.json
