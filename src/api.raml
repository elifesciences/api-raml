#%RAML 1.0
---
title: eLife Sciences API
baseUri: https://api.elifesciences.org/
version: 1.0.0
documentation:
  - title: Welcome
    content: |
        Welcome to the eLife Sciences API. The API is described using [RAML 1.0](http://raml.org/); it is available in [its raw form](api.raml), or as this compiled documentation.
  - title: Licence
    content: !include LICENSE
  - title: Versioning
    content: |
        API endpoints are not versioned, but the body of requests/responses are.

        ## Content versioning

        Endpoints produce/consume dedicated content type, with the version as a parameter (eg `application/vnd.elife.labs-experiment-list+json;version=1`). These are primarily JSON-based (and described using [JSON Schema](http://json-schema.org/)), but alternative representations may be available.

        This verisoning follows [semantic versioning](http://semver.org/). Note we only use the major version as minor versions are backwards compatabile (so the API will return versions `1` and `2` rather than `1.0`, `1.1`, `2.0` etc).

        You can request a specific version of a response using content negotation (eg `Accept: application/vnd.elife.labs-experiment-list+json;version=1`). The most recent version will always be preferred, so without a `version` parameter on the `Accept` header the latest version will be returned.

        ### On a request

        The following examples *are* breaking changes (and so *require* a new version):

          - Adding a new required property
          - Making an optional property required
          - Removing a possibility from an array property

        The following examples *are not* breaking changes (and so *do not* require a new version):

          - Making a required property optional
          - Removing a property
          - Adding a new possibility to an array property

        ### On a response

        The following examples *are* breaking changes (and so *require* a new version):

          - Making a required property optional
          - Adding a new possibility to an array property
          - Changing the type of a property

        The following examples *are not* breaking changes (and so *do not* require a new version):

          - Adding a new property
          - Making an optional property required
          - Removing an optional property

        ## Endpoint versioning

        As the endpoint itself is not versioned, functionality may be removed (including removing support for versions of content). We will try and deprecate first, and avoid removing support where possible.

        When something has been marked as deprecated we will add a message to responses as a the HTTP `Warning` header (a deprecation will always begin with the word 'Deprecation'). For example, `Warning: 299 api.elifesciences.org "Deprecation: 'foo' query string parameter will be removed, use 'bar' instead"`.
  - title: HTML
    content: |
        Most properties may contain inline HTML 5 elements. Properties may contain specific block-level HTML 5 elements if specified.

        Properties may use the following classes:

        - `underline`
        - `monospace`
        - `small-caps`
        - `author-callout-style-a1` through to `author-callout-style-a3` (for text colours)
        - `author-callout-style-b1` through to `author-callout-style-b8` (for background colours)

resourceTypes:
    base:
        get?: &common
    item:
        type: base
        usage: This resource type should be used for any single item.
        get?:
            responses:
                404:
                    description: |
                        <<resource>> is not found.
                    body:
                        application/problem+json:
                            schema: !include ../dist/model/error.v1.json
                            example: |
                                {
                                    "title": "<<resource>> not found"
                                }
                410:
                    description: |
                        <<resource>> has been removed.
                    body:
                        application/problem+json:
                            schema: !include ../dist/model/error.v1.json
                            example: |
                                {
                                    "title": "<<resource>> removed"
                                }
    collection:
        type: base
        usage: This resourceType should be used for any collection of items.
        get?:

traits:
    paged:
        queryParameters:
            page:
                description: |
                    Page number to retrieve.
                type: integer
                required: false
                default: 1
                minimum: 1
                example: 2
            per-page:
                description: |
                    Number of <<resources | !lowercase>> per page.
                type: integer
                required: false
                default: 20
                minimum: 1
                maximum: 100
                example: 50
            order:
                description: |
                    Ordering direction.
                type: string
                required: false
                default: desc
                enum:
                  - asc
                  - desc
                example: asc
        responses:
            404:
                description: |
                    Page is not found.

                    Note the first page will always return a valid result, even if the list is empty.
                body:
                    application/problem+json:
                        schema: !include ../dist/model/error.v1.json
                        example: |
                            {
                                "title": "Page not found"
                            }
    subjected:
        queryParameters:
            subject:
                description: |
                    Only include <<resources | !lowercase>> with one of the specified subjects.
                type: string[]
                required: false
                example: [cell-biology]
    dateRanged:
        queryParameters:
            start-date:
                description: |
                    Only include <<resources | !lowercase>> available on or after this date.
                type: date-only
                required: false
                example: 2017-01-02
            end-date:
                description: |
                    Only include <<resources | !lowercase>> available before and on this date.
                type: date-only
                required: false
                example: 2017-01-02
            use-date:
                description: |
                    Which date to use for ordering and filtering.

                    `default` refers to the default date per content type, which may change over time. `published` refers to the original publication date, which does not change.
                type: string
                enum:
                  - default
                  - published
                required: false
                default: default

/annual-reports:
    type: collection
    description: |
        Annual reports
    get:
        description: |
            Get a list of annual reports, sorted by year.
        is:
          - paged: { resources: Annual reports }
        responses:
            200:
                description: |
                    List of annual reports, sorted by year.
                body:
                    application/vnd.elife.annual-report-list+json;version=1:
                        schema: !include ../dist/model/annual-report-list.v1.json
                        examples:
                            populated:
                                displayName: Populated list
                                description: |
                                    List is split over two pages.
                                value: !include samples/annual-report-list/v1/populated.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/annual-report-list/v1/empty.json

    /{year}:
        type:
            item:
                resource: Annual report
        description: |
            Individual annual report.
        uriParameters:
            year:
                description: |
                    Annual report year.
                type: integer
                minimum: 2012
        get:
            description: |
                Get an annual report.
            responses:
                200:
                    description: |
                        Annual report.
                    body:
                        application/vnd.elife.annual-report+json;version=1:
                            schema: !include ../dist/model/annual-report.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/annual-report/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/annual-report/v1/complete.json

/articles:
    type: collection
    description: |
        Article
    get:
        description: |
            Get a list of articles, sorted by date.
        is:
          - paged: { resources: Articles }
        responses:
            200:
                description: |
                    List of articles, sorted by date.
                body:
                    application/vnd.elife.article-list+json;version=1:
                        schema: !include model/article-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/article-list/v1/first-page.json
                            mixedResults:
                                displayName: Mixed results
                                description: |
                                    List contains mixed published and preview content.
                                value: !include samples/article-list/v1/unpublished-first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/article-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Article
        description: |
            Latest version of an individual article.
        uriParameters:
            id:
                description: |
                    Article ID.
                type: string
        get:
            description: |
                Get an article.
            responses:
                200:
                    description: |
                        Article latest version.
                    body:
                        application/vnd.elife.article-poa+json;version=1:
                            schema: !include ../dist/model/article-poa.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/article-poa/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/article-poa/v1/complete.json
                                unpublishedMinimum:
                                    displayName: PreviewMinimum
                                    value: !include samples/article-poa/v1/unpublished-minimum.json
                                unpublishedComplete:
                                    displayName: PreviewComplete
                                    value: !include samples/article-poa/v1/unpublished-complete.json

                        application/vnd.elife.article-vor+json;version=1:
                            schema: !include model/article-vor.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/article-vor/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/article-vor/v1/complete.json
                                unpublishedMinimum:
                                    displayName: PreviewMinimum
                                    value: !include samples/article-vor/v1/unpublished-minimum.json
                                unpublishedComplete:
                                    displayName: PreviewComplete
                                    value: !include samples/article-vor/v1/unpublished-complete.json
                                00569:
                                    displayName: '00569'
                                    value: !include samples/article-vor/v1/00569.json
                                15278:
                                    displayName: '15278'
                                    value: !include samples/article-vor/v1/15278.json

        /related:
            type:
                item:
                    resource: Article relations
            get:
                description: |
                    Get related articles.
                responses:
                    200:
                        description: |
                            Related articles.
                        body:
                            application/vnd.elife.article-related+json;version=1:
                                schema: !include ../dist/model/article-related.v1.json
                                example:
                                    value: !include samples/article-related/v1/complete.json

        /versions:
            type:
                item:
                    resource: Article
            description: |
                Individual article history.
            get:
                description: |
                    Get an article history.
                responses:
                    200:
                        description: |
                            Article history.
                        body:
                            application/vnd.elife.article-history+json;version=1:
                                schema: !include ../dist/model/article-history.v1.json
                                examples:
                                    minimum:
                                        displayName: Minimum
                                        value: !include samples/article-history/v1/minimum.json
                                    oneVersion:
                                        displayName: One version
                                        value: !include samples/article-history/v1/one-version.json
                                    multipleVersions:
                                        displayName: Multiple versions
                                        value: !include samples/article-history/v1/multiple-versions.json
                                    unpublishedMinimum: 
                                        displayName: PreviewMinimum
                                        value: !include samples/article-history/v1/unpublished-minimum.json
                                    unpublishedMultipleVersions:
                                        displayName: Multiple Versions With Preview
                                        description: |
                                            Multiple versions including a version being previewed.
                                        value: !include samples/article-history/v1/unpublished-multiple-versions.json

            /{version}:
                type:
                    item:
                        resource: Article version
                description: |
                    Individual article version.
                uriParameters:
                    version:
                        description: |
                            Article version number.
                        type: integer
                        minimum: 1
                get:
                    description: |
                        Get an article.
                    responses:
                        200:
                            description: |
                                Article version.
                            body:
                                application/vnd.elife.article-poa+json;version=1:
                                    schema: !include ../dist/model/article-poa.v1.json
                                    examples:
                                        minimum:
                                            displayName: Minimum
                                            value: !include samples/article-poa/v1/minimum.json
                                        complete:
                                            displayName: Complete
                                            value: !include samples/article-poa/v1/complete.json
                                        unpublishedMinimum:
                                            displayName: PreviewMinimum
                                            value: !include samples/article-poa/v1/unpublished-minimum.json
                                        unpublishedComplete:
                                            displayName: PreviewComplete
                                            value: !include samples/article-poa/v1/unpublished-complete.json

                                application/vnd.elife.article-vor+json;version=1:
                                    schema: !include ../dist/model/article-vor.v1.json
                                    examples:
                                        minimum:
                                            displayName: Minimum
                                            value: !include samples/article-vor/v1/minimum.json
                                        complete:
                                            displayName: Complete
                                            value: !include samples/article-vor/v1/complete.json
                                        unpublishedMinimum:
                                            displayName: PreviewMinimum
                                            value: !include samples/article-vor/v1/unpublished-minimum.json
                                        unpublishedComplete:
                                            displayName: PreviewComplete
                                            value: !include samples/article-vor/v1/unpublished-complete.json

/blog-articles:
    type: collection
    description: |
        Blog articles
    get:
        description: |
            Get a list of articles, sorted by publication date.
        is:
          - paged: { resources: Articles }
          - subjected: { resources: Articles }
        responses:
            200:
                description: |
                    List of articles, sorted by publication date.
                body:
                    application/vnd.elife.blog-article-list+json;version=1:
                        schema: !include ../dist/model/blog-article-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/blog-article-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/blog-article-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Article
        description: |
            Individual blog article.
        uriParameters:
            id:
                description: |
                    Article ID.
                type: string
        get:
            description: |
                Get an article.
            responses:
                200:
                    description: |
                        Article.
                    body:
                        application/vnd.elife.blog-article+json;version=1:
                            schema: !include ../dist/model/blog-article.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/blog-article/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/blog-article/v1/complete.json

/collections:
    type: collection
    description: |
        Collections
    get:
        description: |
            Get a list of collections, sorted by date.
        is:
          - paged: { resources: Collections }
          - subjected: { resources: Collections }
        responses:
            200:
                description: |
                    List of collections, sorted by date.
                body:
                    application/vnd.elife.collection-list+json;version=1:
                        schema: !include ../dist/model/collection-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/collection-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/collection-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Collection
        description: |
            Individual collection.
        uriParameters:
            id:
                description: |
                    Collection ID.
                type: string
        get:
            description: |
                Get a collection.
            responses:
                200:
                    description: |
                        Collection.
                    body:
                        application/vnd.elife.collection+json;version=1:
                            schema: !include ../dist/model/collection.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/collection/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/collection/v1/complete.json

/community:
    type: collection
    description: |
        Community-relevant content
    get:
        description: |
            Get a list of community-relevant content, sorted by date.
        is:
          - paged: { resources: Items }
          - subjected: { resources: Items }
        responses:
            200:
                description: |
                    List of items.
                body:
                    application/vnd.elife.community-list+json;version=1:
                        schema: !include ../dist/model/community-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/community-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/community-list/v1/empty.json

/covers:
    type: collection
    description: |
        Covers
    get:
        description: |
            Get a list of covers.
        is:
          - paged: { resources: Covers }
          - dateRanged: { resources: Covers }
        queryParameters:
            sort:
                description: |
                    Sorting method.
                type: string
                required: false
                default: date
                enum:
                  - date
                  - page-views
        responses:
            200:
                description: |
                    List of covers.
                body:
                    application/vnd.elife.cover-list+json;version=1:
                        schema: !include ../dist/model/cover-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/cover-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/cover-list/v1/empty.json

    /current:
        type: collection
        description: |
            Current covers
        get:
            description: |
                Get a list of current covers.
            responses:
                200:
                    description: |
                        List of current covers.
                    body:
                        application/vnd.elife.cover-list+json;version=1:
                            schema: !include ../dist/model/cover-list.v1.json
                            example:
                                value: !include samples/cover-list/v1/first-page.json

/events:
    type: collection
    description: |
        Events
    get:
        description: |
            Get a list of events, sorted by start date.
        is:
          - paged: { resources: Events }
        queryParameters:
            show:
                description: |
                    Type of events to show.
                type: string
                required: false
                default: all
                enum:
                  - all
                  - closed
                  - open
        responses:
            200:
                description: |
                    List of events, sorted by start date.
                body:
                    application/vnd.elife.event-list+json;version=1:
                        schema: !include ../dist/model/event-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/event-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/event-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Event
        description: |
            Individual event.
        uriParameters:
            id:
                description: |
                    Event ID.
                type: string
        get:
            description: |
                Get an event.
            responses:
                200:
                    description: |
                        Event.
                    body:
                        application/vnd.elife.event+json;version=1:
                            schema: !include ../dist/model/event.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/event/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/event/v1/complete.json

/highlights/{list}:
    type: collection
    description: |
        Highlights
    uriParameters:
        type:
            description: |
                List name.
            type: string
    get:
        description: |
            Get highlights list.
        responses:
            200:
                body:
                    application/vnd.elife.highlights+json;version=1:
                        schema: !include ../dist/model/highlights.v1.json
                        example:
                            value: !include samples/highlights/v1/complete.json

/interviews:
    type: collection
    description: |
        Interviews
    get:
        description: |
            Get a list of interviews, sorted by publication date.
        is:
          - paged: { resources: Interviews }
        responses:
            200:
                description: |
                    List of interviews, sorted by publication date.
                body:
                    application/vnd.elife.interview-list+json;version=1:
                        schema: !include ../dist/model/interview-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/interview-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/interview-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Interview
        description: |
            Individual interview.
        uriParameters:
            id:
                description: |
                    Interview ID.
                type: string
        get:
            description: |
                Get an interview.
            responses:
                200:
                    description: |
                        Interview.
                    body:
                        application/vnd.elife.interview+json;version=1:
                            schema: !include ../dist/model/interview.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/interview/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/interview/v1/complete.json

/labs-experiments:
    type: collection
    description: |
        Labs experiments
    get:
        description: |
            Get a list of experiments, sorted by number.
        is:
          - paged: { resources: Experiments }
        responses:
            200:
                description: |
                    List of experiments, sorted by number.
                body:
                    application/vnd.elife.labs-experiment-list+json;version=1:
                        schema: !include ../dist/model/labs-experiment-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/labs-experiment-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/labs-experiment-list/v1/empty.json

    /{number}:
        type:
            item:
                resource: Experiment
        description: |
            Individual Labs experiment.
        uriParameters:
            number:
                description: |
                    Experiment number.
                type: integer
                minimum: 1
        get:
            description: |
                Get an experiment.
            responses:
                200:
                    description: |
                        Experiment.
                    body:
                        application/vnd.elife.labs-experiment+json;version=1:
                            schema: !include ../dist/model/labs-experiment.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/labs-experiment/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/labs-experiment/v1/complete.json

/medium-articles:
    type: collection
    description: |
        Medium articles
    get:
        description: |
            Get a list of Medium articles, sorted by publication date.
        is:
          - paged: { resources: Articles }
        responses:
            200:
                description: |
                    List of Medium articles, sorted by publication date.
                body:
                    application/vnd.elife.medium-article-list+json;version=1:
                        schema: !include ../dist/model/medium-article-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/medium-article-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/medium-article-list/v1/empty.json

/metrics/{type}/{id}/citations:
    type: collection
    description: |
        Citation metrics
    uriParameters:
        type:
            description: |
                Content type.
            type: string
            enum:
              - article
        id:
            description: |
                Content ID.
            type: string
    get:
        description: |
            Get citation metrics for a piece of content
        responses:
            200:
                body:
                    application/vnd.elife.metric-citations+json;version=1:
                        schema: !include ../dist/model/metric-citations.v1.json
                        example:
                            value: !include samples/metric-citations/v1/complete.json

/metrics/{type}/{id}/{metric}:
    type: collection
    description: |
        Metrics
    uriParameters:
        type:
            description: |
                Content type.
            type: string
            enum:
              - article
        id:
            description: |
                Content ID.
            type: string
        metric:
            description: |
                Metric.
            type: string
            enum:
              - downloads
              - page-views
    get:
        description: |
            Get a metric for a piece of content
        is:
          - paged: { resources: Time periods }
        queryParameters:
            by:
                description: |
                    Time period.
                type: string
                required: false
                default: month
                enum:
                  - day
                  - month
        responses:
            200:
                body:
                    application/vnd.elife.metric-time-period+json;version=1:
                        schema: !include ../dist/model/metric-time-period.v1.json
                        examples:
                            by-day:
                                displayName: By day
                                value: !include samples/metric-time-period/v1/by-day.json
                            by-month:
                                displayName: By month
                                value: !include samples/metric-time-period/v1/by-month.json

/people:
    type: collection
    description: |
        eLife people
    get:
        description: |
            Get a list of people, sorted by surname then given name.
        is:
          - paged: { resources: People }
          - subjected: { resources: People }
        queryParameters:
            type:
                description: |
                    Person type.
                type: string
                required: false
                enum:
                  - director
                  - executive
                  - leadership
                  - reviewing-editor
                  - senior-editor
        responses:
            200:
                description: |
                    List of people, sorted by surname then given name.
                body:
                    application/vnd.elife.person-list+json;version=1:
                        schema: !include ../dist/model/person-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/person-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/person-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Person
        description: |
            Individual person.
        uriParameters:
            id:
                description: |
                    Person ID.
                type: string
        get:
            description: |
                Get a person.
            responses:
                200:
                    description: |
                        Person.
                    body:
                        application/vnd.elife.person+json;version=1:
                            schema: !include ../dist/model/person.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/person/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/person/v1/complete.json

/podcast-episodes:
    type: collection
    description: |
        Podcast episodes
    get:
        description: |
            Get a list of episodes, sorted by number.
        is:
          - paged: { resources: Episodes }
          - subjected: { resources: Episodes }
        responses:
            200:
                description: |
                    List of episodes, sorted by number.
                body:
                    application/vnd.elife.podcast-episode-list+json;version=1:
                        schema: !include ../dist/model/podcast-episode-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/podcast-episode-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/podcast-episode-list/v1/empty.json

    /{number}:
        type:
            item:
                resource: Episode
        description: |
            Individual podcast episode.
        uriParameters:
            number:
                description: |
                    Episode number.
                type: integer
                minimum: 1
        get:
            description: |
                Get an episode.
            responses:
                200:
                    description: |
                        Episode.
                    body:
                        application/vnd.elife.podcast-episode+json;version=1:
                            schema: !include ../dist/model/podcast-episode.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/podcast-episode/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/podcast-episode/v1/complete.json

/press-packages:
    type: collection
    description: |
        Press packages
    get:
        description: |
            Get a list of press packages, sorted by publication date.
        is:
          - paged: { resources: Press packages }
          - subjected: { resources: Press packages }
        responses:
            200:
                description: |
                    List of press packages, sorted by publication date.
                body:
                    application/vnd.elife.press-package-list+json;version=1:
                        schema: !include ../dist/model/press-package-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/press-package-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/press-package-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Press package
        description: |
            Individual press package.
        uriParameters:
            id:
                description: |
                    Press package ID.
                type: string
        get:
            description: |
                Get a press package.
            responses:
                200:
                    description: |
                        Press package.
                    body:
                        application/vnd.elife.press-package+json;version=1:
                            schema: !include ../dist/model/press-package.v1.json
                            examples:
                                minimum:
                                    displayName: Minimum
                                    value: !include samples/press-package/v1/minimum.json
                                complete:
                                    displayName: Complete
                                    value: !include samples/press-package/v1/complete.json

/recommendations/{type}/{id}:
    type: collection
    description: |
        Recommendations
    uriParameters:
        type:
            description: |
                Content type.
            type: string
            enum:
              - article
        id:
            description: |
                Content ID.
            type: string
    get:
        description: |
            Get a list of recommendations.
        is:
          - paged: { resources: Recommendations }
        responses:
            200:
                body:
                    application/vnd.elife.recommendations+json;version=1:
                        schema: !include ../dist/model/recommendations.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/recommendations/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/recommendations/v1/empty.json

/search:
    type: collection
    description: |
        Search
    get:
        description: |
            Search.
        is:
          - paged: { resources: Results }
          - subjected: { resources: Results }
          - dateRanged: { resources: Results }
        queryParameters:
            for:
                description: |
                    Search term
                type: string
                required: true
                example: Plasmodium falciparum
            sort:
                description: |
                    Sorting method.
                type: string
                required: false
                default: relevance
                enum:
                  - relevance
                  - date
            type:
                description: |
                    Only include results of the specified types.
                type: array
                items:
                    type: string
                    enum:
                      - correction
                      - editorial
                      - feature
                      - insight
                      - research-advance
                      - research-article
                      - research-exchange
                      - retraction
                      - registered-report
                      - replication-study
                      - short-report
                      - tools-resources
                      - blog-article
                      - event
                      - interview
                      - labs-experiment
                      - podcast-episode
                required: false
        responses:
            200:
                description: |
                    List of results.
                body:
                    application/vnd.elife.search+json;version=1:
                        schema: !include ../dist/model/search.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/search/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/search/v1/empty.json

/subjects:
    type: collection
    description: |
        Subjects
    get:
        description: |
            Get a list of subjects, sorted by name.
        is:
          - paged: { resources: Subjects }
        responses:
            200:
                description: |
                    List of subjects, sorted by number.
                body:
                    application/vnd.elife.subject-list+json;version=1:
                        schema: !include ../dist/model/subject-list.v1.json
                        examples:
                            paginated:
                                displayName: First page
                                description: |
                                    List is split over two pages.
                                value: !include samples/subject-list/v1/first-page.json
                            empty:
                                displayName: Empty list
                                description: |
                                    Demonstration of the list being empty (the first page will always return a valid result).
                                value: !include samples/subject-list/v1/empty.json

    /{id}:
        type:
            item:
                resource: Subject
        description: |
            Individual subject.
        uriParameters:
            id:
                description: |
                    Subject ID.
                type: string
        get:
            description: |
                Get a subject.
            responses:
                200:
                    description: |
                        Subject.
                    body:
                        application/vnd.elife.subject+json;version=1:
                            schema: !include ../dist/model/subject.v1.json
                            example:
                                value: !include samples/subject/v1/complete.json
